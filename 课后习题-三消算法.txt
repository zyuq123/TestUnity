1：请使用递归的方式实现三消算法
递归一定要退出条件，也就是说要有return语句。
我们传统意义上的三消就是在你对其中一个元素做了操作之后，生成的新的地图是否满足消除条件，以开心消消乐为例，就是说当两个元素的位置互换后是否满足了消除条件，如果是就进行消除，否则就回到原来的位置。

想一下把你的屏幕想象成棋盘，在上面可以消除的元素想象成棋子，是不是具体了很多？那么现在棋盘上每个位置放置的元素是不是可以用一个最简单的二维数组来存放了呢？

三消算法的核心就是如何判断棋盘更新之后是否有满足三消的情况出现。
下面给大家写一段伪代码提供一下思路
eliminate（元素 当前）
{
    //把这个元素放入临时的集合中
    if（我左边的元素和我的类型相同）
    {
        eliminate（元素 当前的左边）
    }
    else if（我右边的元素和我的类型相同）
    {
        eliminate（元素 当前的右边）
    }
    else if（我上边的元素和我的类型相同）
    {
        eliminate（元素 当前的上边）
    }
    else if（我下边的元素和我的类型相同）
    {
        eliminate（元素 当前的下边）
    }
    else
    {
        return;
    }
}
这里说的当前元素的上下左右的临近元素，是分别需要对应到你的二维数组里的。
这样判断完成你就可以得到所有可能需要消除的元素的集合了，为什么是可能需要消除呢？
因为我们是三消，也就是说要满足集合中的元素的总数大于等于3的时候才满足消除条件，这个时候就要执行这些元素相应的消除操作，当然你也可以加入更多的奖励机制
例如消除的总量达到五个有额外奖励等等。
不过上述的消除算法还是有瑕疵不知道大家看出来了没有，那就是在向我们的需要消除的集合中添加元素的时候我们没有判断这个元素是否已经被添加过了。如果已经被添加过了，然后重复被多次添加会出现意想不到的BUG，这个问题改如何解决呢？我们来优化一下我们的伪代码

eliminate（元素 当前）
{
    //把这个元素放入临时的集合中
    if（我左边的元素和我的类型相同）
    {
        if（临时的集合中已经有了这个元素）
        {
        }
        else
        {
            eliminate（元素 当前的左边）
        }
    }
    else if（我右边的元素和我的类型相同）
    {
        if（临时的集合中已经有了这个元素）
        {
        }
        else
        {
            eliminate（元素 当前的右边）
        }
    }
    else if（我上边的元素和我的类型相同）
    {
        if（临时的集合中已经有了这个元素）
        {
        }
        else
        {
            eliminate（元素 当前的上边）
        }
    }
    else if（我下边的元素和我的类型相同）
    {
        if（临时的集合中已经有了这个元素）
        {
        }
        else
        {
            eliminate（元素 当前的下边）
        }
    }
    else
    {
        return;
    }
}
2：请用非递归的方式实现三消算法


3：生成地图的算法（开发一个编辑器，策划使用即可，导出CSV或者txt）
有各种各样的地图。这里拿最简单的矩形来说。需求：
1.这个算法要生成一个随机的地图，不能有3个横着同样或者3个竖着同样。
2.这个地图用户移动一步能进行消除(不能是个死地图)

初看到这个需求感觉还是蛮难的。后来想了下第2个需求应该先别管，假设是死地图。再又一次生成一张地图就能够了。測试了下，生成死地图的概率很低。

算法实现的描写叙述:
假设地图的(0,0)在左上角。

很easyx从上面的最左边開始往右生成，y从最上面直究竟部。

每次先推断下它的左边两个是否已经同色。还有上面两个是否已经同色，假设同色了，要去掉这个颜色。

假设已经生成的地图是：
2, 3, 3, 4, 1, 3, 2
1, 2, 3, 4, 4, 3, 3
1, 2, 4, 2, 2, X
由于X的左边两个都是2，所以X不能再是2了，它的上面两个都是3。所以X不能再是3了。

所以X的结果仅仅能是0,1,4中随机取一个了。


题目二：判断地图是不是死地图
unity三消
https://www.jianshu.com/p/df61a1961f0e
